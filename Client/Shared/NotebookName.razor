@inject IJSRuntime JSRuntime
@inject NotebookService content

<div class="notebook-name" contenteditable="true" @ref=nameDiv>
    @if (notebook != null)
    {
        @notebook.Title
    } else {
        @name
    }
</div>

@code {
    [Parameter]
    public string NotebookId { get; set; }
    private string name = "New notebook";

    private Notebook notebook;
    ElementReference nameDiv;

    IJSObjectReference module;
    protected override async Task OnInitializedAsync()
    {
        module = await JSRuntime.InvokeAsync<IJSObjectReference>("import",
            "./js/notebook-name.js");
        notebook = await content.GetById(NotebookId);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (module != null)
        {
            var component = DotNetObjectReference.Create(this);
            await module.InvokeAsync<string>("registerListener", nameDiv, component);
        }
    }

    [JSInvokable("RenameNotebook")]
    public async Task<bool> RenameNotebook(string newName)
    {
        if (notebook != null)
        {
            notebook.Title = newName;
            await content.Save(notebook);
            return true;
        }
        return false;
    }

}