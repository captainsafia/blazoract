@using System.Net.Http
@using MonacoRazor

@inject HttpClient Http

<div class="code-cell">
    <div class="top">
        <div class="toolbar">
            <button @onclick="RunCell">&#x25BA;</button>
        </div>
        <CodeEditor @bind-Code="cell.Content" OnCompletionsRequested="GetCompletionsAsync" />
    </div>
    <div class="output @ResultCssClass">
        @* TODO: Create a cleaner system for formatting different kinds of output/status *@
        @if (isEvaluating)
        {
            <text>...</text>
        }
        else if (result != null)
        {
            if (!string.IsNullOrEmpty(result.CommandFailedMessage))
            {
                @result.CommandFailedMessage
            }
            else if (result.Output != null)
            {
                @result.Output
            }
            else
            {
                <text>(No output)</text>
            }
        }
    </div>
</div>

@code {
    [Parameter]
    public Cell cell { get; set; }

    private ExecuteResult result;
    private bool isEvaluating;

    private string ResultCssClass
        => !string.IsNullOrEmpty(result?.CommandFailedMessage) ? "command-failed" : null;

    private async Task RunCell()
    {
        try
        {
            isEvaluating = true;
            var request = new ExecuteRequest(cell.Content);
            var response = await Http.PostAsJsonAsync("api/code/run", request);
            result = await response.Content.ReadFromJsonAsync<ExecuteResult>();
        }
        finally
        {
            isEvaluating = false;
        }
    }

    private async Task<Suggestion[]> GetCompletionsAsync(string value, Position position)
    {
        var response = await Http.PostAsJsonAsync("run/getcompletions", new GetCompletionsRequest
        {
            Code = value,
            Column = position.Column,
            LineNumber = position.LineNumber
        });

        return await response.Content.ReadFromJsonAsync<Suggestion[]>();
    }
}